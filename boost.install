<?php

/**
 * @file
 * Handles Boost module installation and upgrade tasks.
 */

//
// Core API hooks
use Drupal\Core\Url;

/**
 * Implements hook_enable().
 */
function boost_enable() {
  boost_htaccess_cache_dir_put();
}

/**
 * Implements hook_disable().
 */
function boost_disable() {
  // Make sure that the static page cache is wiped when the module is disabled:
  boost_flush_caches();
  \Drupal::messenger()->addStatus(t('Static page cache cleared.'));
}

/**
 * Implements hook_install().
 */
function boost_install() {
}

/**
 * Implements hook_uninstall().
 */
function boost_uninstall() {
  \Drupal::cache('bootstrap')->deleteAll();
}

/**
 * Implements hook_requirements().
 */
function boost_requirements($phase) {
  $requirements = [];
  $t = 't';
  // Check the server's ability to use boost
  if ($phase == 'runtime') {
    $core_cache = \Drupal::config('system.performance')->get('cache.page.enabled');

    if ($core_cache) {
      $requirements['boost_core_cache'] = [
        'title' => $t('Boost'),
        'value' => $t('Core cache is enabled'),
        'severity' => REQUIREMENT_WARNING,
        'description' => $t('Boost will not function properly while Drupal core cache is enabled. Disable Boost or <a href="@settings">the core cache</a>.', [
          '@settings' => Url::fromRoute('system.performance_settings'),
        ]),
      ];
    }

    // Check cache directories
    $cache_directories = [boost_get_normal_cache_dir()];
    foreach ($cache_directories as $cache_directory) {
      if (boost_mkdir($cache_directory)) {
        // $root_file = file_put_contents($cache_directory . '/' . variable_get('boost_root_file', '.boost'), $cache_directory);
      }
      if (!is_dir($cache_directory)) {
        $requirements['boost_default'] = [
          'title' => $t('Boost'),
          'description' => $t('!cache_dir: does not exist.', ['!cache_dir' => $cache_directory]),
          'severity' => REQUIREMENT_ERROR,
          'value' => $t('Cache path'),
        ];
      }
      if (is_dir($cache_directory) && !is_writable($cache_directory)) {
        $requirements['boost_permissions'] = [
          'title' => $t('Boost'),
          'description' => $t(
            'Directory %dir credentials - Permissions: %fp. Owner %fo. Group %fg.<br /> Your credentials - Group ID: %gid. User ID: %uid. Current script owner: %user.',
            [
              '%dir' => getcwd() . '/' . $cache_directory,
              '%gid' => getmygid(),
              '%uid' => getmyuid(),
              '%user' => get_current_user(),
              '%fp' => substr(sprintf('%o', fileperms($cache_directory)), -4),
              '%fo' => fileowner($cache_directory),
              '%fg' => filegroup($cache_directory),
            ]
          ),
          'severity' => REQUIREMENT_ERROR,
          'value' => $t('Can not write to file-system'),
        ];
      }
    }
    if (empty($requirements)) {
      $requirements['boost'] = [
        'title' => $t('Boost'),
        'severity' => REQUIREMENT_OK,
        'value' => $t('Boost installed correctly, should be working if properly <a href="@settings">configured</a>.', [
          '@settings' => Url::fromUri('internal:/admin/config/system/boost'),
        ]),
      ];
    }
  }
  return $requirements;
}

/**
 * Add the preload path script.
 */
function boost_update_8001() {
  $config = \Drupal::configFactory()->getEditable('boost.settings');
  if ($config->get('boost_preload_path') === NULL) {
    $config->set('boost_preload_path', '/tmp');
    $config->save(TRUE);
  }
}
